"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const router = express.Router();
const dbwrapper = require("../database/dbwrapper");
/*
router.get('/', (req, res) => {
    res.status(200);
    res.setHeader('Content-Type', 'text/plain');
    res.send("Hello World!\n");
});
*/
// Create a user
router.post('/:username', (req, res, next) => {
    var username = req.params.username;
    var password = req.body.password;
    if (username && password) {
        dbwrapper.adduser(username, password, err => {
            if (err) {
                next(err);
            }
            else {
                res.status(200).json(null);
            }
        });
    }
    else {
        next({ "error": true, "reason": "Must supply a username and password" });
    }
});
// Update a user
router.put('/:username', (req, res, next) => {
    var username = req.params.username;
    var password = req.body.password;
    if (username && password) {
        dbwrapper.updateuser(username, password, err => {
            if (err) {
                next(err);
            }
            else {
                res.status(200).json(null);
            }
        });
    }
    else {
        next({ "error": true, "reason": "Must supply a username and password" });
    }
});
// Delete a user
router.delete('/:username', (req, res, next) => {
    let username = req.params.username;
    dbwrapper.deleteuser(username, err => {
        if (err) {
            next(err);
        }
        else {
            res.status(200).json(null);
        }
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvdXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEMsbURBQWtEO0FBQ2xEOzs7Ozs7RUFNRTtBQUNGLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUNyQyxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNuQyxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNqQyxFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2QixTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRztZQUNyQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxxQ0FBcUMsRUFBQyxDQUFDLENBQUE7SUFDMUUsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDO0FBQ0gsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQ3BDLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ25DLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2pDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHO1lBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLHFDQUFxQyxFQUFDLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDSCxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDdkMsSUFBSSxRQUFRLEdBQVksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDNUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsR0FBRztRQUM5QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUE7QUFFRixrQkFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcbmltcG9ydCAqIGFzIGRid3JhcHBlciBmcm9tIFwiLi4vZGF0YWJhc2UvZGJ3cmFwcGVyXCJcclxuLypcclxucm91dGVyLmdldCgnLycsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgcmVzLnN0YXR1cygyMDApO1xyXG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTtcclxuICAgIHJlcy5zZW5kKFwiSGVsbG8gV29ybGQhXFxuXCIpO1xyXG59KTtcclxuKi9cclxuLy8gQ3JlYXRlIGEgdXNlclxyXG5yb3V0ZXIucG9zdCgnLzp1c2VybmFtZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgdmFyIHVzZXJuYW1lID0gcmVxLnBhcmFtcy51c2VybmFtZTtcclxuICAgIHZhciBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xyXG4gICAgaWYgKHVzZXJuYW1lICYmIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgZGJ3cmFwcGVyLmFkZHVzZXIodXNlcm5hbWUsIHBhc3N3b3JkLCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0KGVycik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBuZXh0KHtcImVycm9yXCI6IHRydWUsIFwicmVhc29uXCI6IFwiTXVzdCBzdXBwbHkgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmRcIn0pXHJcbiAgICB9XHJcblxyXG59KTtcclxuLy8gVXBkYXRlIGEgdXNlclxyXG5yb3V0ZXIucHV0KCcvOnVzZXJuYW1lJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICB2YXIgdXNlcm5hbWUgPSByZXEucGFyYW1zLnVzZXJuYW1lO1xyXG4gICAgdmFyIHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcbiAgICBpZiAodXNlcm5hbWUgJiYgcGFzc3dvcmQpIHtcclxuICAgICAgICBkYndyYXBwZXIudXBkYXRldXNlcih1c2VybmFtZSwgcGFzc3dvcmQsIGVyciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIG5leHQoZXJyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5leHQoe1wiZXJyb3JcIjogdHJ1ZSwgXCJyZWFzb25cIjogXCJNdXN0IHN1cHBseSBhIHVzZXJuYW1lIGFuZCBwYXNzd29yZFwifSlcclxuICAgIH1cclxufSk7XHJcbi8vIERlbGV0ZSBhIHVzZXJcclxucm91dGVyLmRlbGV0ZSgnLzp1c2VybmFtZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgbGV0IHVzZXJuYW1lIDogc3RyaW5nID0gcmVxLnBhcmFtcy51c2VybmFtZTtcclxuICAgIGRid3JhcHBlci5kZWxldGV1c2VyKHVzZXJuYW1lLCBlcnIgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgbmV4dChlcnIpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24obnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiXX0=