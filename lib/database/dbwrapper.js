"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_host = process.env.DB_HOST;
const db_port = process.env.DB_PORT;
const db_username = process.env.DB_USER;
const db_password = process.env.DB_PASS;
const http = require("http");
let add_or_update_user = (username, password, done, existing_user) => {
    // An object of options to indicate where to post to
    let post_data = {
        name: username,
        password: password,
        roles: [],
        type: 'user'
    };
    if (existing_user) {
        post_data._rev = existing_user._rev;
    }
    var base64encodedData = new Buffer(db_username + ':' + db_password).toString('base64');
    var post_options;
    post_options = {
        host: db_host,
        port: db_port,
        path: '/_users/org.couchdb.user:' + username,
        method: 'PUT',
        headers: {
            'Authorization': 'Basic ' + base64encodedData,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    };
    // Set up the request
    var post_req = http.request(post_options, function (res) {
        var body = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            body += chunk;
        });
        res.on('end', function () {
            var response = JSON.parse(body);
            if (response.ok) {
                done();
            }
            else {
                done(response);
            }
        });
    });
    post_req.write(JSON.stringify(post_data));
    post_req.end();
};
function get_user(username, done) {
    basic_method_on_user('GET', username, done);
}
function adduser(username, password, done) {
    add_or_update_user(username, password, done, null);
}
exports.adduser = adduser;
function updateuser(username, newPassword, done) {
    get_user(username, (err, user_object) => {
        if (err) {
            done(err);
        }
        else {
            add_or_update_user(username, newPassword, done, user_object);
        }
    });
}
exports.updateuser = updateuser;
function deleteuser(username, done) {
    get_user(username, (err, user_object) => {
        if (err) {
            done(err);
        }
        else {
            basic_method_on_user('DELETE', username + "?rev=" + user_object._rev, done);
        }
    });
}
exports.deleteuser = deleteuser;
function basic_method_on_user(method_name, username, done) {
    // An object of options to indicate where to post to
    var base64encodedData = new Buffer(db_username + ':' + db_password).toString('base64');
    var get_options = {
        host: db_host,
        port: db_port,
        path: '/_users/org.couchdb.user:' + username,
        method: method_name,
        headers: {
            'Authorization': 'Basic ' + base64encodedData,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    };
    // Set up the request
    var post_req = http.request(get_options, function (res) {
        var body = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            body += chunk;
        });
        res.on('end', function () {
            var response = JSON.parse(body);
            if (response.error) {
                done(response);
            }
            else {
                done(null, response);
            }
        });
    });
    post_req.end();
}
//# sourceMappingURL=data:application/json;base64,